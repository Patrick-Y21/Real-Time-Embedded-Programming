/****************************************
#   Description: Flame sensor experiment
*****************************************/
#include <stdio.h>
#include <wiringPi.h>
#include <pcf8591.h>
#include <math.h>

#define		makerobo_PCF     120  // Base Pin 120
#define		makerobo_DOpin	 0    // Flame Sensor Pin

// Print message, prints out the flame sensor status value
void makerobo_Print(int x)
{
	switch(x)
	{
		case 1:      
			printf("\n******************\n"  );
			printf(  "* Makerobo Saft~ *\n"  );
			printf(  "******************\n\n");
		break;
		case 0:      
			printf("\n******************\n"  );
			printf(  "*Makerobo  Fire! *\n"  );
			printf(  "******************\n\n");
		break;
		default:    
			printf("\n**********************\n"  );
			printf(  "* Print value error. *\n"  );
			printf(  "**********************\n\n");
		break;
	}
}

// main function
int main()
{
	int makerobo_analogVal;              // analog variable
	int makerobo_tmp, makerobo_status;   // analog status values
	
	// Print message to screen when initialization connection fails
	if(wiringPiSetup() == -1){
		printf("setup wiringPi failed !");
		return 1;
	}
	// Set pcf8591 on base pin 120, address 0x48
	pcf8591Setup(makerobo_PCF, 0x48);
    // Flame sensor digital port DO value, set to input mode
	pinMode(makerobo_DOpin, INPUT);
    // status value
	makerobo_status = 0; 
	// infinite loop
	while(1) 
	{
		makerobo_analogVal = analogRead(makerobo_PCF + 0); // get value on AIN0, read flame sensor value
		printf("%d\n", makerobo_analogVal);      // print out the analog value of the flame sensor

		makerobo_tmp = digitalRead(makerobo_DOpin);     // read the value of the digital IO port

		if (makerobo_tmp != makerobo_status)       // change in the state of judgment
		{
			makerobo_Print(makerobo_tmp);         // print out the flame information value
			makerobo_status = makerobo_tmp;       // judge the current state value as the next state value to avoid repetitive printing
		} 
		delay (200);                             // delay 200ms
	}
	return 0;
}
